// <auto-generated />
using System;
using MaterialFlow.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MaterialFlow.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251026081807_AddRolesAndPermissions")]
    partial class AddRolesAndPermissions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MaterialFlow.Domain.ComponentReservations.ComponentReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("material_id");

                    b.Property<DateOnly>("RequirementDate")
                        .HasColumnType("date")
                        .HasColumnName("requirement_date");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.Property<Guid>("SourceOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_order_id");

                    b.Property<string>("SourceOrderType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source_order_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_component_reservation");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_component_reservation_material_id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_component_reservation_site_id");

                    b.ToTable("component_reservation", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.ForecastPlanItems.ForecastPlanItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConsumptionIndicator")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("consumption_indicator");

                    b.Property<Guid>("ForecastPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("forecast_plan_id");

                    b.Property<DateOnly>("PeriodStartDate")
                        .HasColumnType("date")
                        .HasColumnName("period_start_date");

                    b.HasKey("Id")
                        .HasName("pk_forecast_plan_item");

                    b.HasIndex("ForecastPlanId")
                        .HasDatabaseName("ix_forecast_plan_item_forecast_plan_id");

                    b.ToTable("forecast_plan_item", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.ForecastPlans.ForecastPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("material_id");

                    b.Property<int>("PeriodGranularity")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("period_granularity");

                    b.Property<Guid?>("PlanningAreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("planning_area_id");

                    b.Property<string>("PlanningStrategy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("planning_strategy");

                    b.Property<Guid?>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_forecast_plan");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_forecast_plan_material_id");

                    b.HasIndex("PlanningAreaId")
                        .HasDatabaseName("ix_forecast_plan_planning_area_id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_forecast_plan_site_id");

                    b.ToTable("forecast_plan", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.InventoryBalances.InventoryBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Batch")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("batch");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("material_id");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.Property<Guid?>("StorageLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("storage_location_id");

                    b.HasKey("Id")
                        .HasName("pk_inventory_balance");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_inventory_balance_material_id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_inventory_balance_site_id");

                    b.HasIndex("StorageLocationId")
                        .HasDatabaseName("ix_inventory_balance_storage_location_id");

                    b.ToTable("inventory_balance", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.Materials.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LotSizePolicy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lot_size_policy");

                    b.Property<string>("MaterialRequirementsPlanningType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("material_requirements_planning_type");

                    b.Property<int>("PlannedDeliveryTimeInDays")
                        .HasColumnType("integer")
                        .HasColumnName("planned_delivery_time_in_days");

                    b.Property<string>("ProcurementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("procurement_type");

                    b.HasKey("Id")
                        .HasName("pk_material");

                    b.ToTable("material", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.PlannedProductionOrders.PlannedProductionOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("material_id");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_status");

                    b.Property<Guid?>("PlanningRunId")
                        .HasColumnType("uuid")
                        .HasColumnName("planning_run_id");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("quantity");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_planned_production_order");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_planned_production_order_material_id");

                    b.HasIndex("PlanningRunId")
                        .HasDatabaseName("ix_planned_production_order_planning_run_id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_planned_production_order_site_id");

                    b.ToTable("planned_production_order", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.PlanningAreas.PlanningArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("PlanningAreaCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("planning_area_code");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.HasKey("Id")
                        .HasName("pk_planning_area");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_planning_area_site_id");

                    b.ToTable("planning_area", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.PlanningRunLines.PlanningRunLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("material_id");

                    b.Property<Guid>("PlanningRunId")
                        .HasColumnType("uuid")
                        .HasColumnName("planning_run_id");

                    b.Property<string>("RecommendedAction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("recommended_action");

                    b.Property<DateOnly>("RequirementDate")
                        .HasColumnType("date")
                        .HasColumnName("requirement_date");

                    b.Property<DateOnly?>("RescheduleDate")
                        .HasColumnType("date")
                        .HasColumnName("reschedule_date");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.HasKey("Id")
                        .HasName("pk_planning_run_line");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_planning_run_line_material_id");

                    b.HasIndex("PlanningRunId")
                        .HasDatabaseName("ix_planning_run_line_planning_run_id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_planning_run_line_site_id");

                    b.ToTable("planning_run_line", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.PlanningRuns.PlanningRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_status");

                    b.Property<Guid?>("PlanningAreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("planning_area_id");

                    b.Property<int>("PlanningHorizonInDays")
                        .HasColumnType("integer")
                        .HasColumnName("planning_horizon_in_days");

                    b.Property<DateTime>("RunTimestampUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("run_timestamp_utc");

                    b.Property<Guid?>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.Property<string>("StartedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("started_by_user");

                    b.HasKey("Id")
                        .HasName("pk_planning_run");

                    b.HasIndex("PlanningAreaId")
                        .HasDatabaseName("ix_planning_run_planning_area_id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_planning_run_site_id");

                    b.ToTable("planning_run", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.ProductComponents.ProductComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("material_id");

                    b.Property<Guid>("ProductStructureId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_structure_id");

                    b.Property<decimal?>("ScrapPercentage")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("scrap_percentage");

                    b.HasKey("Id")
                        .HasName("pk_product_component");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_product_component_material_id");

                    b.HasIndex("ProductStructureId")
                        .HasDatabaseName("ix_product_component_product_structure_id");

                    b.ToTable("product_component", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.ProductStructures.ProductStructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AlternativeNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("alternative_number");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("material_id");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_status");

                    b.Property<Guid?>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("usage");

                    b.Property<DateOnly>("ValidFromDate")
                        .HasColumnType("date")
                        .HasColumnName("valid_from_date");

                    b.Property<DateOnly?>("ValidToDate")
                        .HasColumnType("date")
                        .HasColumnName("valid_to_date");

                    b.HasKey("Id")
                        .HasName("pk_product_structure");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_product_structure_material_id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_product_structure_site_id");

                    b.ToTable("product_structure", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.ProductionOrders.ProductionOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("material_id");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_status");

                    b.Property<Guid?>("PlannedProductionOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("planned_production_order_id");

                    b.Property<DateOnly>("ScheduledEndDate")
                        .HasColumnType("date")
                        .HasColumnName("scheduled_end_date");

                    b.Property<DateOnly>("ScheduledStartDate")
                        .HasColumnType("date")
                        .HasColumnName("scheduled_start_date");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.HasKey("Id")
                        .HasName("pk_production_order");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_production_order_material_id");

                    b.HasIndex("PlannedProductionOrderId")
                        .HasDatabaseName("ix_production_order_planned_production_order_id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_production_order_site_id");

                    b.ToTable("production_order", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.PurchaseRequests.PurchaseRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("material_id");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_status");

                    b.Property<Guid?>("PlanningRunId")
                        .HasColumnType("uuid")
                        .HasColumnName("planning_run_id");

                    b.Property<string>("PurchasingGroup")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("purchasing_group");

                    b.Property<DateOnly>("RequestedDeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("requested_delivery_date");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.HasKey("Id")
                        .HasName("pk_purchase_request");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_purchase_request_material_id");

                    b.HasIndex("PlanningRunId")
                        .HasDatabaseName("ix_purchase_request_planning_run_id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_purchase_request_site_id");

                    b.ToTable("purchase_request", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.SalesOrderDemands.SalesOrderDemand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid")
                        .HasColumnName("material_id");

                    b.Property<DateOnly>("RequirementDate")
                        .HasColumnType("date")
                        .HasColumnName("requirement_date");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.HasKey("Id")
                        .HasName("pk_sales_order_demand");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_sales_order_demand_material_id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_sales_order_demand_site_id");

                    b.ToTable("sales_order_demand", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.Sites.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PlantCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("plant_code");

                    b.HasKey("Id")
                        .HasName("pk_site");

                    b.HasIndex("PlantCode")
                        .IsUnique()
                        .HasDatabaseName("ix_site_plant_code");

                    b.ToTable("site", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.Sites.StorageLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.HasKey("Id")
                        .HasName("pk_storage_location");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_storage_location_site_id");

                    b.ToTable("storage_location", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.Users.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permission");

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.Users.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permission");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permission_permission_id");

                    b.ToTable("role_permission", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("identity_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("IdentityId")
                        .HasDatabaseName("ix_user_identity_id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer")
                        .HasColumnName("roles_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_role_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_role_user_users_id");

                    b.ToTable("role_user", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.ComponentReservations.ComponentReservation", b =>
                {
                    b.HasOne("MaterialFlow.Domain.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_component_reservation_material_material_id");

                    b.HasOne("MaterialFlow.Domain.Sites.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_component_reservation_site_site_id");

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("ComponentReservationId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 3)
                                .HasColumnType("numeric(18,3)")
                                .HasColumnName("quantity_amount");

                            b1.HasKey("ComponentReservationId");

                            b1.ToTable("component_reservation");

                            b1.WithOwner()
                                .HasForeignKey("ComponentReservationId")
                                .HasConstraintName("fk_component_reservation_component_reservation_id");

                            b1.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<Guid>("QuantityComponentReservationId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("quantity_unit_of_measure_value");

                                    b2.HasKey("QuantityComponentReservationId");

                                    b2.ToTable("component_reservation");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityComponentReservationId")
                                        .HasConstraintName("fk_component_reservation_component_reservation_id");
                                });

                            b1.Navigation("UnitOfMeasure")
                                .IsRequired();
                        });

                    b.Navigation("Material");

                    b.Navigation("Quantity")
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("MaterialFlow.Domain.ForecastPlanItems.ForecastPlanItem", b =>
                {
                    b.HasOne("MaterialFlow.Domain.ForecastPlans.ForecastPlan", "ForecastPlan")
                        .WithMany("Items")
                        .HasForeignKey("ForecastPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forecast_plan_item_forecast_plan_forecast_plan_id");

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("ForecastPlanItemId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(21, 3)
                                .HasColumnType("numeric(21,3)")
                                .HasColumnName("quantity_amount");

                            b1.HasKey("ForecastPlanItemId");

                            b1.ToTable("forecast_plan_item");

                            b1.WithOwner()
                                .HasForeignKey("ForecastPlanItemId")
                                .HasConstraintName("fk_forecast_plan_item_forecast_plan_item_id");

                            b1.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<Guid>("QuantityForecastPlanItemId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("quantity_unit_of_measure_value");

                                    b2.HasKey("QuantityForecastPlanItemId");

                                    b2.ToTable("forecast_plan_item");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityForecastPlanItemId")
                                        .HasConstraintName("fk_forecast_plan_item_forecast_plan_item_id");
                                });

                            b1.Navigation("UnitOfMeasure")
                                .IsRequired();
                        });

                    b.Navigation("ForecastPlan");

                    b.Navigation("Quantity")
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialFlow.Domain.ForecastPlans.ForecastPlan", b =>
                {
                    b.HasOne("MaterialFlow.Domain.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forecast_plan_material_material_id");

                    b.HasOne("MaterialFlow.Domain.PlanningAreas.PlanningArea", "PlanningArea")
                        .WithMany()
                        .HasForeignKey("PlanningAreaId")
                        .HasConstraintName("fk_forecast_plan_planning_area_planning_area_id");

                    b.HasOne("MaterialFlow.Domain.Sites.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .HasConstraintName("fk_forecast_plan_site_site_id");

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b1 =>
                        {
                            b1.Property<Guid>("ForecastPlanId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("unit_of_measure_value");

                            b1.HasKey("ForecastPlanId");

                            b1.ToTable("forecast_plan");

                            b1.WithOwner()
                                .HasForeignKey("ForecastPlanId")
                                .HasConstraintName("fk_forecast_plan_forecast_plan_id");
                        });

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("ForecastPlanId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("EndDate")
                                .HasColumnType("date")
                                .HasColumnName("date_range_end_date");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("date")
                                .HasColumnName("date_range_start_date");

                            b1.HasKey("ForecastPlanId");

                            b1.ToTable("forecast_plan");

                            b1.WithOwner()
                                .HasForeignKey("ForecastPlanId")
                                .HasConstraintName("fk_forecast_plan_forecast_plan_id");
                        });

                    b.Navigation("DateRange")
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("PlanningArea");

                    b.Navigation("Site");

                    b.Navigation("UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialFlow.Domain.InventoryBalances.InventoryBalance", b =>
                {
                    b.HasOne("MaterialFlow.Domain.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_balance_material_material_id");

                    b.HasOne("MaterialFlow.Domain.Sites.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_balance_site_site_id");

                    b.HasOne("MaterialFlow.Domain.Sites.StorageLocation", "StorageLocation")
                        .WithMany()
                        .HasForeignKey("StorageLocationId")
                        .HasConstraintName("fk_inventory_balance_storage_location_storage_location_id");

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.Quantity", "OnHand", b1 =>
                        {
                            b1.Property<Guid>("InventoryBalanceId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(21, 3)
                                .HasColumnType("numeric(21,3)")
                                .HasColumnName("on_hand_amount");

                            b1.HasKey("InventoryBalanceId");

                            b1.ToTable("inventory_balance");

                            b1.WithOwner()
                                .HasForeignKey("InventoryBalanceId")
                                .HasConstraintName("fk_inventory_balance_inventory_balance_id");

                            b1.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<Guid>("QuantityInventoryBalanceId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("on_hand_unit_of_measure_value");

                                    b2.HasKey("QuantityInventoryBalanceId");

                                    b2.ToTable("inventory_balance");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityInventoryBalanceId")
                                        .HasConstraintName("fk_inventory_balance_inventory_balance_id");
                                });

                            b1.Navigation("UnitOfMeasure")
                                .IsRequired();
                        });

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.Quantity", "Reserved", b1 =>
                        {
                            b1.Property<Guid>("InventoryBalanceId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(21, 3)
                                .HasColumnType("numeric(21,3)")
                                .HasColumnName("reserved_amount");

                            b1.HasKey("InventoryBalanceId");

                            b1.ToTable("inventory_balance");

                            b1.WithOwner()
                                .HasForeignKey("InventoryBalanceId")
                                .HasConstraintName("fk_inventory_balance_inventory_balance_id");

                            b1.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<Guid>("QuantityInventoryBalanceId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("reserved_unit_of_measure_value");

                                    b2.HasKey("QuantityInventoryBalanceId");

                                    b2.ToTable("inventory_balance");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityInventoryBalanceId")
                                        .HasConstraintName("fk_inventory_balance_inventory_balance_id");
                                });

                            b1.Navigation("UnitOfMeasure")
                                .IsRequired();
                        });

                    b.Navigation("Material");

                    b.Navigation("OnHand")
                        .IsRequired();

                    b.Navigation("Reserved")
                        .IsRequired();

                    b.Navigation("Site");

                    b.Navigation("StorageLocation");
                });

            modelBuilder.Entity("MaterialFlow.Domain.Materials.Material", b =>
                {
                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.Quantity", "SafetyStockQuantity", b1 =>
                        {
                            b1.Property<Guid>("MaterialId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 3)
                                .HasColumnType("numeric(18,3)")
                                .HasColumnName("safety_stock_quantity_amount");

                            b1.HasKey("MaterialId");

                            b1.ToTable("material");

                            b1.WithOwner()
                                .HasForeignKey("MaterialId")
                                .HasConstraintName("fk_material_material_id");

                            b1.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<Guid>("QuantityMaterialId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("safety_stock_quantity_unit_of_measure_value");

                                    b2.HasKey("QuantityMaterialId");

                                    b2.ToTable("material");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityMaterialId")
                                        .HasConstraintName("fk_material_material_id");
                                });

                            b1.Navigation("UnitOfMeasure")
                                .IsRequired();
                        });

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b1 =>
                        {
                            b1.Property<Guid>("MaterialId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("unit_of_measure_value");

                            b1.HasKey("MaterialId");

                            b1.ToTable("material");

                            b1.WithOwner()
                                .HasForeignKey("MaterialId")
                                .HasConstraintName("fk_material_material_id");
                        });

                    b.OwnsOne("MaterialFlow.Domain.Materials.ValueObjects.MaterialNumber", "MaterialNumber", b1 =>
                        {
                            b1.Property<Guid>("MaterialId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("material_number_value");

                            b1.HasKey("MaterialId");

                            b1.ToTable("material");

                            b1.WithOwner()
                                .HasForeignKey("MaterialId")
                                .HasConstraintName("fk_material_material_id");
                        });

                    b.Navigation("MaterialNumber")
                        .IsRequired();

                    b.Navigation("SafetyStockQuantity")
                        .IsRequired();

                    b.Navigation("UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialFlow.Domain.PlannedProductionOrders.PlannedProductionOrder", b =>
                {
                    b.HasOne("MaterialFlow.Domain.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_planned_production_order_material_material_id");

                    b.HasOne("MaterialFlow.Domain.PlanningRuns.PlanningRun", "PlanningRun")
                        .WithMany()
                        .HasForeignKey("PlanningRunId")
                        .HasConstraintName("fk_planned_production_order_planning_run_planning_run_id");

                    b.HasOne("MaterialFlow.Domain.Sites.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_planned_production_order_site_site_id");

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b1 =>
                        {
                            b1.Property<Guid>("PlannedProductionOrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("unit_of_measure_value");

                            b1.HasKey("PlannedProductionOrderId");

                            b1.ToTable("planned_production_order");

                            b1.WithOwner()
                                .HasForeignKey("PlannedProductionOrderId")
                                .HasConstraintName("fk_planned_production_order_planned_production_order_id");
                        });

                    b.Navigation("Material");

                    b.Navigation("PlanningRun");

                    b.Navigation("Site");

                    b.Navigation("UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialFlow.Domain.PlanningAreas.PlanningArea", b =>
                {
                    b.HasOne("MaterialFlow.Domain.Sites.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_planning_area_site_site_id");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("MaterialFlow.Domain.PlanningRunLines.PlanningRunLine", b =>
                {
                    b.HasOne("MaterialFlow.Domain.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_planning_run_line_material_material_id");

                    b.HasOne("MaterialFlow.Domain.PlanningRuns.PlanningRun", "PlanningRun")
                        .WithMany("Lines")
                        .HasForeignKey("PlanningRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_planning_run_line_planning_run_planning_run_id");

                    b.HasOne("MaterialFlow.Domain.Sites.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_planning_run_line_site_site_id");

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.Quantity", "AvailableQuantity", b1 =>
                        {
                            b1.Property<Guid>("PlanningRunLineId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(21, 3)
                                .HasColumnType("numeric(21,3)")
                                .HasColumnName("available_quantity_amount");

                            b1.HasKey("PlanningRunLineId");

                            b1.ToTable("planning_run_line");

                            b1.WithOwner()
                                .HasForeignKey("PlanningRunLineId")
                                .HasConstraintName("fk_planning_run_line_planning_run_line_id");

                            b1.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<Guid>("QuantityPlanningRunLineId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("available_quantity_unit_of_measure_value");

                                    b2.HasKey("QuantityPlanningRunLineId");

                                    b2.ToTable("planning_run_line");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityPlanningRunLineId")
                                        .HasConstraintName("fk_planning_run_line_planning_run_line_id");
                                });

                            b1.Navigation("UnitOfMeasure")
                                .IsRequired();
                        });

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.Quantity", "RequirementQuantity", b1 =>
                        {
                            b1.Property<Guid>("PlanningRunLineId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(21, 3)
                                .HasColumnType("numeric(21,3)")
                                .HasColumnName("requirement_quantity_amount");

                            b1.HasKey("PlanningRunLineId");

                            b1.ToTable("planning_run_line");

                            b1.WithOwner()
                                .HasForeignKey("PlanningRunLineId")
                                .HasConstraintName("fk_planning_run_line_planning_run_line_id");

                            b1.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<Guid>("QuantityPlanningRunLineId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("requirement_quantity_unit_of_measure_value");

                                    b2.HasKey("QuantityPlanningRunLineId");

                                    b2.ToTable("planning_run_line");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityPlanningRunLineId")
                                        .HasConstraintName("fk_planning_run_line_planning_run_line_id");
                                });

                            b1.Navigation("UnitOfMeasure")
                                .IsRequired();
                        });

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.Quantity", "ShortageQuantity", b1 =>
                        {
                            b1.Property<Guid>("PlanningRunLineId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(21, 3)
                                .HasColumnType("numeric(21,3)")
                                .HasColumnName("shortage_quantity_amount");

                            b1.HasKey("PlanningRunLineId");

                            b1.ToTable("planning_run_line");

                            b1.WithOwner()
                                .HasForeignKey("PlanningRunLineId")
                                .HasConstraintName("fk_planning_run_line_planning_run_line_id");

                            b1.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<Guid>("QuantityPlanningRunLineId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("shortage_quantity_unit_of_measure_value");

                                    b2.HasKey("QuantityPlanningRunLineId");

                                    b2.ToTable("planning_run_line");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityPlanningRunLineId")
                                        .HasConstraintName("fk_planning_run_line_planning_run_line_id");
                                });

                            b1.Navigation("UnitOfMeasure")
                                .IsRequired();
                        });

                    b.Navigation("AvailableQuantity")
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("PlanningRun");

                    b.Navigation("RequirementQuantity")
                        .IsRequired();

                    b.Navigation("ShortageQuantity")
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("MaterialFlow.Domain.PlanningRuns.PlanningRun", b =>
                {
                    b.HasOne("MaterialFlow.Domain.PlanningAreas.PlanningArea", "PlanningArea")
                        .WithMany()
                        .HasForeignKey("PlanningAreaId")
                        .HasConstraintName("fk_planning_run_planning_area_planning_area_id");

                    b.HasOne("MaterialFlow.Domain.Sites.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .HasConstraintName("fk_planning_run_site_site_id");

                    b.Navigation("PlanningArea");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("MaterialFlow.Domain.ProductComponents.ProductComponent", b =>
                {
                    b.HasOne("MaterialFlow.Domain.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_component_material_material_id");

                    b.HasOne("MaterialFlow.Domain.ProductStructures.ProductStructure", "ProductStructure")
                        .WithMany("Components")
                        .HasForeignKey("ProductStructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_component_product_structure_product_structure_id");

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.Quantity", "QuantityPer", b1 =>
                        {
                            b1.Property<Guid>("ProductComponentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(21, 3)
                                .HasColumnType("numeric(21,3)")
                                .HasColumnName("quantity_per_amount");

                            b1.HasKey("ProductComponentId");

                            b1.ToTable("product_component");

                            b1.WithOwner()
                                .HasForeignKey("ProductComponentId")
                                .HasConstraintName("fk_product_component_product_component_id");

                            b1.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<Guid>("QuantityProductComponentId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("quantity_per_unit_of_measure_value");

                                    b2.HasKey("QuantityProductComponentId");

                                    b2.ToTable("product_component");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityProductComponentId")
                                        .HasConstraintName("fk_product_component_product_component_id");
                                });

                            b1.Navigation("UnitOfMeasure")
                                .IsRequired();
                        });

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b1 =>
                        {
                            b1.Property<Guid>("ProductComponentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("unit_of_measure_value");

                            b1.HasKey("ProductComponentId");

                            b1.ToTable("product_component");

                            b1.WithOwner()
                                .HasForeignKey("ProductComponentId")
                                .HasConstraintName("fk_product_component_product_component_id");
                        });

                    b.Navigation("Material");

                    b.Navigation("ProductStructure");

                    b.Navigation("QuantityPer")
                        .IsRequired();

                    b.Navigation("UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialFlow.Domain.ProductStructures.ProductStructure", b =>
                {
                    b.HasOne("MaterialFlow.Domain.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_structure_material_material_id");

                    b.HasOne("MaterialFlow.Domain.Sites.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .HasConstraintName("fk_product_structure_site_site_id");

                    b.Navigation("Material");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("MaterialFlow.Domain.ProductionOrders.ProductionOrder", b =>
                {
                    b.HasOne("MaterialFlow.Domain.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_order_material_material_id");

                    b.HasOne("MaterialFlow.Domain.PlannedProductionOrders.PlannedProductionOrder", "PlannedProductionOrder")
                        .WithMany()
                        .HasForeignKey("PlannedProductionOrderId")
                        .HasConstraintName("fk_production_order_planned_production_order_planned_productio");

                    b.HasOne("MaterialFlow.Domain.Sites.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_order_site_site_id");

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.Quantity", "QuantityToProduce", b1 =>
                        {
                            b1.Property<Guid>("ProductionOrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(21, 3)
                                .HasColumnType("numeric(21,3)")
                                .HasColumnName("quantity_to_produce_amount");

                            b1.HasKey("ProductionOrderId");

                            b1.ToTable("production_order");

                            b1.WithOwner()
                                .HasForeignKey("ProductionOrderId")
                                .HasConstraintName("fk_production_order_production_order_id");

                            b1.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<Guid>("QuantityProductionOrderId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("quantity_to_produce_unit_of_measure_value");

                                    b2.HasKey("QuantityProductionOrderId");

                                    b2.ToTable("production_order");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityProductionOrderId")
                                        .HasConstraintName("fk_production_order_production_order_id");
                                });

                            b1.Navigation("UnitOfMeasure")
                                .IsRequired();
                        });

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b1 =>
                        {
                            b1.Property<Guid>("ProductionOrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("unit_of_measure_value");

                            b1.HasKey("ProductionOrderId");

                            b1.ToTable("production_order");

                            b1.WithOwner()
                                .HasForeignKey("ProductionOrderId")
                                .HasConstraintName("fk_production_order_production_order_id");
                        });

                    b.Navigation("Material");

                    b.Navigation("PlannedProductionOrder");

                    b.Navigation("QuantityToProduce")
                        .IsRequired();

                    b.Navigation("Site");

                    b.Navigation("UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialFlow.Domain.PurchaseRequests.PurchaseRequest", b =>
                {
                    b.HasOne("MaterialFlow.Domain.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchase_request_material_material_id");

                    b.HasOne("MaterialFlow.Domain.PlanningRuns.PlanningRun", "PlanningRun")
                        .WithMany()
                        .HasForeignKey("PlanningRunId")
                        .HasConstraintName("fk_purchase_request_planning_run_planning_run_id");

                    b.HasOne("MaterialFlow.Domain.Sites.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchase_request_site_site_id");

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("PurchaseRequestId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(21, 3)
                                .HasColumnType("numeric(21,3)")
                                .HasColumnName("quantity_amount");

                            b1.HasKey("PurchaseRequestId");

                            b1.ToTable("purchase_request");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseRequestId")
                                .HasConstraintName("fk_purchase_request_purchase_request_id");

                            b1.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<Guid>("QuantityPurchaseRequestId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("quantity_unit_of_measure_value");

                                    b2.HasKey("QuantityPurchaseRequestId");

                                    b2.ToTable("purchase_request");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityPurchaseRequestId")
                                        .HasConstraintName("fk_purchase_request_purchase_request_id");
                                });

                            b1.Navigation("UnitOfMeasure")
                                .IsRequired();
                        });

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b1 =>
                        {
                            b1.Property<Guid>("PurchaseRequestId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("unit_of_measure_value");

                            b1.HasKey("PurchaseRequestId");

                            b1.ToTable("purchase_request");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseRequestId")
                                .HasConstraintName("fk_purchase_request_purchase_request_id");
                        });

                    b.Navigation("Material");

                    b.Navigation("PlanningRun");

                    b.Navigation("Quantity")
                        .IsRequired();

                    b.Navigation("Site");

                    b.Navigation("UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialFlow.Domain.SalesOrderDemands.SalesOrderDemand", b =>
                {
                    b.HasOne("MaterialFlow.Domain.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sales_order_demand_material_material_id");

                    b.HasOne("MaterialFlow.Domain.Sites.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sales_order_demand_site_site_id");

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("SalesOrderDemandId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 3)
                                .HasColumnType("numeric(18,3)")
                                .HasColumnName("quantity_amount");

                            b1.HasKey("SalesOrderDemandId");

                            b1.ToTable("sales_order_demand");

                            b1.WithOwner()
                                .HasForeignKey("SalesOrderDemandId")
                                .HasConstraintName("fk_sales_order_demand_sales_order_demand_id");

                            b1.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<Guid>("QuantitySalesOrderDemandId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("quantity_unit_of_measure_value");

                                    b2.HasKey("QuantitySalesOrderDemandId");

                                    b2.ToTable("sales_order_demand");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantitySalesOrderDemandId")
                                        .HasConstraintName("fk_sales_order_demand_sales_order_demand_id");
                                });

                            b1.Navigation("UnitOfMeasure")
                                .IsRequired();
                        });

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b1 =>
                        {
                            b1.Property<Guid>("SalesOrderDemandId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("unit_of_measure_value");

                            b1.HasKey("SalesOrderDemandId");

                            b1.ToTable("sales_order_demand");

                            b1.WithOwner()
                                .HasForeignKey("SalesOrderDemandId")
                                .HasConstraintName("fk_sales_order_demand_sales_order_demand_id");
                        });

                    b.OwnsOne("MaterialFlow.Domain.SalesOrderDemands.ValueObjects.SourceDocument", "SourceDocument", b1 =>
                        {
                            b1.Property<Guid>("SalesOrderDemandId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ItemNumber")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("source_document_item_number");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("source_document_number");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("source_document_type");

                            b1.HasKey("SalesOrderDemandId");

                            b1.ToTable("sales_order_demand");

                            b1.WithOwner()
                                .HasForeignKey("SalesOrderDemandId")
                                .HasConstraintName("fk_sales_order_demand_sales_order_demand_id");
                        });

                    b.Navigation("Material");

                    b.Navigation("Quantity")
                        .IsRequired();

                    b.Navigation("Site");

                    b.Navigation("SourceDocument")
                        .IsRequired();

                    b.Navigation("UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialFlow.Domain.Sites.StorageLocation", b =>
                {
                    b.HasOne("MaterialFlow.Domain.Sites.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_storage_location_site_site_id");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("MaterialFlow.Domain.Users.RolePermission", b =>
                {
                    b.HasOne("MaterialFlow.Domain.Users.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_permission_permission_id");

                    b.HasOne("Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_role_role_id");
                });

            modelBuilder.Entity("MaterialFlow.Domain.Users.User", b =>
                {
                    b.OwnsOne("MaterialFlow.Domain.Users.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("email_value");

                            b1.HasKey("UserId");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");
                        });

                    b.OwnsOne("MaterialFlow.Domain.Users.ValueObjects.FirstName", "FirstName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("first_name_value");

                            b1.HasKey("UserId");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");
                        });

                    b.OwnsOne("MaterialFlow.Domain.Users.ValueObjects.LastName", "LastName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("last_name_value");

                            b1.HasKey("UserId");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FirstName")
                        .IsRequired();

                    b.Navigation("LastName")
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_role_roles_id");

                    b.HasOne("MaterialFlow.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_user_users_id");
                });

            modelBuilder.Entity("MaterialFlow.Domain.ForecastPlans.ForecastPlan", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MaterialFlow.Domain.PlanningRuns.PlanningRun", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("MaterialFlow.Domain.ProductStructures.ProductStructure", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
