// <auto-generated />
using System;
using MaterialFlow.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MaterialFlow.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251012074439_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MaterialFlow.Domain.Materials.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LotSizePolicy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lot_size_policy");

                    b.Property<string>("MaterialRequirementsPlanningType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("material_requirements_planning_type");

                    b.Property<int>("PlannedDeliveryTimeInDays")
                        .HasColumnType("integer")
                        .HasColumnName("planned_delivery_time_in_days");

                    b.Property<string>("ProcurementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("procurement_type");

                    b.HasKey("Id")
                        .HasName("pk_material");

                    b.ToTable("material", (string)null);
                });

            modelBuilder.Entity("MaterialFlow.Domain.Materials.Material", b =>
                {
                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b1 =>
                        {
                            b1.Property<Guid>("MaterialId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("unit_of_measure_value");

                            b1.HasKey("MaterialId");

                            b1.ToTable("material");

                            b1.WithOwner()
                                .HasForeignKey("MaterialId")
                                .HasConstraintName("fk_material_material_id");
                        });

                    b.OwnsOne("MaterialFlow.Domain.Materials.ValueObjects.MaterialNumber", "MaterialNumber", b1 =>
                        {
                            b1.Property<Guid>("MaterialId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("material_number_value");

                            b1.HasKey("MaterialId");

                            b1.ToTable("material");

                            b1.WithOwner()
                                .HasForeignKey("MaterialId")
                                .HasConstraintName("fk_material_material_id");
                        });

                    b.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.Quantity", "SafetyStockQuantity", b1 =>
                        {
                            b1.Property<Guid>("MaterialId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 3)
                                .HasColumnType("numeric(18,3)")
                                .HasColumnName("safety_stock_quantity_amount");

                            b1.HasKey("MaterialId");

                            b1.ToTable("material");

                            b1.WithOwner()
                                .HasForeignKey("MaterialId")
                                .HasConstraintName("fk_material_material_id");

                            b1.OwnsOne("MaterialFlow.Domain.Shared.ValueObjects.UnitOfMeasure", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<Guid>("QuantityMaterialId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("safety_stock_quantity_unit_of_measure_value");

                                    b2.HasKey("QuantityMaterialId");

                                    b2.ToTable("material");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityMaterialId")
                                        .HasConstraintName("fk_material_material_id");
                                });

                            b1.Navigation("UnitOfMeasure")
                                .IsRequired();
                        });

                    b.Navigation("MaterialNumber")
                        .IsRequired();

                    b.Navigation("SafetyStockQuantity")
                        .IsRequired();

                    b.Navigation("UnitOfMeasure")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
